name: Build & Push Docker Image
description: "Builds applications, runs tests, generates coverage, builds Docker images, and pushes to registries"

inputs:
  app_name:
    description: "Application name"
    required: true
  system_name:
    description: "System name"
    required: true
  environment:
    description: "Deployment environment (e.g., dev, test, prod)"
    required: true
  solution_name:
    description: "Solution name"
    required: false
    default: "Conferenti.sln"
  docker-build-context:
    description: "Build context"
    required: false
    default: "./"
  container_registry:
    description: "Container registry URL"
    required: false
    default: "ghcr.io"
  dockerfile:
    description: "Path to Dockerfile"
    required: false
    default: "Dockerfile"
  tags:
    description: "Image tags (comma-separated)"
    required: true
  push-image:
    description: "Push the image to the registry"
    required: false
    default: "true"
  build-args:
    description: "Build arguments (key=value, comma-separated)"
    required: false
  version:
    description: "Semantic version"
    required: false
  coverage_file_path:
    description: "Path to the code coverage file"
    required: false
    default: "./target/site/coverage.cobertura.xml"
  dotnet_version:
    description: "Version of .NET to use"
    required: false
  gh_token:
    description: "GitHub token"
    required: true
  azure_client_id:
    description: "Azure AD Application Client ID"
    required: false
  azure_tenant_id:
    description: "Azure Tenant ID"
    required: false
  codecov_token:
    description: "Code coverage access token"
    required: false
  slack_webhook_url:
    description: "Slack Webhook URL"
    required: false

runs:
  using: "composite"
  steps:
    - name: Check required inputs
      run: |
        # Explicit checks for required inputs
        [[ "${{ inputs.app_name }}" ]] || { echo "Parameter 'app_name' is required, but is empty." ; exit 1; }
        [[ "${{ inputs.system_name }}" ]] || { echo "Parameter 'system_name' is required, but is empty." ; exit 1; }
        [[ "${{ inputs.environment }}" ]] || { echo "Parameter 'environment' is required, but is empty." ; exit 1; }
        [[ "${{ inputs.tags }}" ]] || { echo "Parameter 'tags' is required, but is empty." ; exit 1; }
      shell: bash

    - name: Lowercase repository name
      run: |
        echo "REPO=${GITHUB_REPOSITORY@L}" >> $GITHUB_ENV
      shell: bash

    - name: Get federated token for Azure
      shell: bash
      id: get-federated-token
      if: ${{ contains(inputs.container_registry, 'azurecr.io') }}
      run: |
        # Get federated token for Azure
        token=$(curl -s -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange" | jq -r '.value')
        echo "::add-mask::$token"
        echo "token=$token" >> "$GITHUB_OUTPUT"

    - name: Login to Azure with federated token
      if: ${{ contains(inputs.container_registry, 'azurecr.io') }}
      run: |
        az login --service-principal \
          --username ${{ inputs.azure_client_id }} \
          --tenant ${{ inputs.azure_tenant_id }} \
          --federated-token ${{ steps.get-federated-token.outputs.token }}
      shell: bash

    - name: Login to Azure Container Registry
      if: ${{ contains(inputs.container_registry, 'azurecr.io') }}
      run: |
        REGISTRY_NAME=$(echo "${{ inputs.container_registry }}" | cut -d'.' -f1)
        az acr login --name $REGISTRY_NAME
      shell: bash

    - name: Login to GHCR
      if: ${{ contains(inputs.container_registry, 'ghcr.io') }}
      uses: docker/login-action@v3
      with:
        registry: "ghcr.io"
        username: ${{ github.actor }}
        password: ${{ inputs.gh_token }}

    - name: Create image name
      run: |
        IMAGE_NAME="${{ inputs.container_registry }}/${{ inputs.system_name }}/${{ inputs.app_name }}-${{ inputs.environment }}"
        echo "IMAGE_NAME=$IMAGE_NAME" >> $GITHUB_ENV
      shell: bash

    - name: Setup .NET
      if: ${{ inputs.dotnet_version }}
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ inputs.dotnet_version }}

    - name: Run tests and generate coverage
      if: ${{ inputs.dotnet_version }}
      run: dotnet test ${{ inputs.solution_name}} --configuration Release /p:CollectCoverage=true /p:CoverletOutputFormat=cobertura
      shell: bash

    - name: Upload coverage to Codecov
      if: ${{ inputs.dotnet_version && inputs.codecov_token }}
      uses: codecov/codecov-action@v5
      with:
        files: ${{ inputs.coverage_file_path }}
        fail_ci_if_error: true
        token: ${{ inputs.codecov_token }}

    - name: Set meta_flavor environment variable
      run: |
        if [[ "${{ inputs.environment }}" == "prod" ]]; then
          echo "meta_flavor=true" >> $GITHUB_ENV
          echo "image_tag=latest" >> $GITHUB_ENV
        else
          echo "meta_flavor=false" >> $GITHUB_ENV
          echo "image_tag=${{ inputs.environment }}_latest" >> $GITHUB_ENV
        fi
      shell: bash

    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.IMAGE_NAME }}
        flavor: |
          latest=${{ env.meta_flavor }}
        tags: |
          type=raw,value=${{ env.image_tag }}
          type=raw,value=${{ github.sha }},priority=1000
          type=semver,pattern={{version}},value=${{ inputs.version }},enable=${{ inputs.version != '' }}
          type=ref,event=branch

    - name: Build Docker image
      uses: docker/build-push-action@v6
      with:
        context: ${{ inputs.docker-build-context }}
        file: ${{ inputs.dockerfile }}
        tags: ${{ inputs.tags }}
        push: ${{ inputs.push-image }}
        build-args: ${{ inputs.build-args }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        provenance: false

    - name: Slack notification
      if: ${{ inputs.slack_webhook_url }}
      uses: kkho/workflows/.github/workflows/slack-message@main
      with:
        slack-webhook-url: ${{ inputs.slack_webhook_url }}
        channel: "#build-${{ inputs.environment }}"
        message: |
          Docker image build for ${{ inputs.app_name }} in ${{ inputs.environment }} completed.
          Status: âœ… Success
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
